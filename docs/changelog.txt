== nervtech release v1.0.0 - ??? ==

- Initial commit of sgtCore.
- Built sgtCore library.
- Added nervMBP project.
- Added test for sgtcore library.
- Adding test for nervMBP.
- Added CUDA files for nervMBP library.
- Adding source file for oct_train_bp.
- Added content from nervtrade project.
- Adding test support for train_bp.
- Large refactoring now using Octave 3.8.2-mingw version to get the nervMBP loading properly with GetProcAddress
- Getting ready to continue...
- Fixed issue with RMS validation computation.
- Updated script files to handle x64 versions.
- Updated ignore file.
- Added implementation for show_cuda_info plugin.
- Added initial profile info for current nnCostFunction implementation.
- Implementing nn_cost_function cpp method.
- Completed initial cpp implementation of nn_cost_function.
- Micro optimizations on nn_coost_function.
- Added initial nervCUDA module.
- Added CUDA matrix multiplication implementation.
- Added support for matrix transpose operation.
- Updating cost_function_cuda implementation.
- Using tpB multMat version.
- Added implementation for tpA support in mult mat.
- Trying to avoid shared memory bank conflicts.
- Working on compute_activation kernel.
- Validated computation of activation and inputs in kernel.
- Moved cudaDeviceReset call in nervcuda test.
- Working implementation of compute_activation with no activation array.
- Cleaning code
- Using input values computed on GPU in nn_cost_function_cuda.
- Cleaned code in nn_cost_function_cuda.
- Added support for cost J computation on GPU.
- Preparing computation of deltas and gradients on GPU.
- Preparing test on deltas computation.
- Tested computation of delta matrices.
- Working on gradient computation tests.
- tested computation of gradients.
- Investigationg invalid address issue.
- Starting from working point for address issue.
- partially working gradient computation when not using the Input matrix.
- Preparing the test the CPU gradients.
- testing CPU gradient computation. Warning nnCostFunction modified here to handle ONLY reg matrix.
- Finally fixed the input array access issue.
- Tested grad computation in CPU with regularization.
- Working gradient computation on GPU.
- Tested GPU computation of gradient.
- Started code cleaning process.
- Working gradien computation WRT nnCostFunction.
- Preparing to clean nnCostFunction.
- Fixed costfunc_cpu test.
- Made inputs array optional for costfunc call.
- Refactored test nervcuda app.
- Added costfunc_device implementation.
- Started implementation of cgtrainCPU
- Working on test for nn_cg_train_cpu.
- Prepared comparaison test for cg_train_cpu.
- testing cg_train_cpu: success with 1 iteration.
- validated test for nn_cg_train_cpu.
- Preparing implementation for conjugateGradient on GPU.
- Separated conjugate gradient implementation in multi classes.
- Started implementation/test of cg_train GPU.
- Integrated regularization correction on GPU algorithm.
- Implemented methods for pure GPU conjugate gradient descent support.
- Added test for gpu basic vector operations.
- working on conjugateDradientGPU implementation.
- Updated cgGPU::resetS() method.
- Updated cgGPU::evaluateCost() method.
- Updated cgGPU::save and restoreParameters.
- removed _df0,1,2 on cpu.
- Removing need for _s array on CPU.
- Finalized cgGPU implementation with test.
- Validated Test of cgGPU in octave.
- Added some performances improvements and tests.
- Minor improvement on compute gradient kernel.
- Trying to improve compute delta kernel.
- Coalesced access to inputs and deltas in compute delta kernel.
- Coalesced access to grads in compute gradient kernel.
- Adding tests for flot matrix multiplication.
- minor optimization in computeActivation for global memory store.
- Keeping reference on GPU event usage.
- Removed vbssim message.
- Performing initial tests for gradient descent support.
- Added test for construction of the gd object.
- Building gradient descent class.
- Started implementation of gd_errfunc_device function.